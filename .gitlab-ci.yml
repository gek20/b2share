image: eudat-docker.artifactory.ci.csc.fi/docker/compose:alpine-1.29.2

include:
  - template: Jobs/SAST.gitlab-ci.yml
  - local: templates/utility.yml
  - local: templates/secrets.yml

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  DEFAULT_IMAGE: b2share-fmi
  DEFAULT_TAG: 2.2.3
  SAST_GOSEC_LEVEL: 2
  # The URL of your Vault server, such as https://vault.example.com:8200. Required.
  VAULT_SERVER_URL: https://dev.vault.eudat.csc.fi:8200
  # The role to use when attempting to authenticate. Optional. If no role is specified, Vault uses the default role specified when the authentication method was configured.
  VAULT_AUTH_ROLE: gitlab-b2share-fmi-build-role

cache:
  paths:
    - .cache/pip

stages:
  - test
  - build
  - container

# Now located in templates/utility.yml
# before_script:
# after_script:

.job-build-ui: &build_ui
  stage: build
  before_script: !reference [.config, common]
  after_script: []
  cache: []
  image: eudat-docker.artifactory.ci.csc.fi/builder-cos7
  secrets: !reference [.suss, secrets]
  script:
    - echo -e "| Debug \n| Stage = ${CI_JOB_STAGE} \n| Job = ${CI_JOB_NAME} \n"
    # Build webui
    - cd webui && npm install --unsafe-perm
    - ./node_modules/webpack/bin/webpack.js -p
    - cd ..
    # Public license selector
    - ./ci-scripts/build-license-selector.sh
  artifacts:
    paths:
      - webui
    expire_in: 1 hour

.job-create-wheels: &create_wheels
  stage: build
  before_script: !reference [.config, common]
  after_script: []
  image: eudat-docker.artifactory.ci.csc.fi/builder-cos7
  secrets: !reference [.suss, secrets]
  script:
    - echo -e "| Debug \n| Stage = ${CI_JOB_STAGE} \n| Job = ${CI_JOB_NAME} \n"
    # create wheels for B2SHARE
    - pip3 install --upgrade pip
    - pip3 install wheel
    - curl -o wheels.tar https://a3s.fi/swift/v1/AUTH_684b53b6e8094581b13ece74e79f489b/wheel-storage/wheels.tar && tar -xvf wheels.tar
    - pip3 wheel --wheel-dir=./wheels --find-links=./wheels -r requirements.txt
    - ls -la wheels
  artifacts:
    paths:
      - wheels
    expire_in: 1 day

.job-container: &make_container
  stage: container
  cache: []
  variables:
    GIT_STRATEGY: clone
    REMOTE_REPOSITORY: https://gitlab.ci.csc.fi/eudat/b2share/b2share-github.git
    DEFAULT_REMOTE_BRANCH: master
    DEPLOY_ENV: development
  secrets: !reference [.suss, secrets]
  script:
    - echo -e "| Debug \n| Stage = ${CI_JOB_STAGE} \n| Job = ${CI_JOB_NAME} \n"
    - !reference [.config, common]
    # Take into account variables coming from upstream, if any
    - export IMAGE_BASE=${IMAGE:-${DEFAULT_IMAGE}}
    - export TAG=${TAG:-${DEFAULT_TAG}}
    - |
      export \
        ARTIFACTORY_URL=${ARTIFACTORY_URL} \
        ARTIFACTORY_USER=${ARTIFACTORY_USER} \
        ARTIFACTORY_PASS=${ARTIFACTORY_PASS} \
        ARTIFACTORY_REGISTRY=${ARTIFACTORY_REGISTRY}
    # Copy certificate files
    # TODO check dis
    # Probably not needed
    # - echo "${T12996_USER01_325_certificate_only}" > usr/var/b2share-instance/21.T12996_USER01_325_certificate_only.pem
    # - echo "${T12996_USER01_325_privkey}" > usr/var/b2share-instance/21.T12996_USER01_325_privkey.pem
    # Returns IMAGE_SHA (in file 'build_var')
    - ./ci-scripts/build-container.sh
    - '[[ -f ./build_var ]] && export IMAGE_SHA=$(cat ./build_var) || echo -e "\nNO SHA variable available\n"'
    - echo -e "IMAGE_SHA - ${IMAGE_SHA}"
    - |
      echo -e "\nTriggering deployment pipeline\n"
      set -exu
      curl -X POST \
        -F "ref=${DEFAULT_REMOTE_BRANCH}" \
        -F "token=${CI_JOB_TOKEN}" \
        -F "variables[TRIGGERED]=true" \
        -F "variables[TAG]=${TAG}" \
        -F "variables[DEPLOY_ENV]=${DEPLOY_ENV}" \
        -F "variables[IMAGE_BASE]=${IMAGE_BASE}" \
        -F "variables[IMAGE_SHA]=${IMAGE_SHA}" \
        ${CI_API_V4_URL}/projects/300/trigger/pipeline | jq .

.job-test: &unit_tests
  secrets: !reference [.suss, secrets]
  script:
    - echo -e "Stage = ${CI_JOB_STAGE} \n"
    - docker login ${ARTIFACTORY_URL} -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_PASS}
    - cd ./ci-docker
    - docker-compose -f ./docker-compose.test.yml build
    - ./docker-test.sh
  allow_failure:
    exit_codes: # Allow failure on xfailed
      - 22
  artifacts:
    paths:
      - logs.log
    expire_in: 1 day

build-ui:
  when: always
  <<: *build_ui

createwheels:
  when: always
  <<: *create_wheels

build-container:
  when: on_success
  <<: *make_container

run-unit-tests:
  only:
    - merge_requests
  <<: *unit_tests
